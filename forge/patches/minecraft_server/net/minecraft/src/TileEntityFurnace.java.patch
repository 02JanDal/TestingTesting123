--- ../src_base/minecraft_server/net/minecraft/src/TileEntityFurnace.java	0000-00-00 00:00:00.000000000 -0000
+++ ../src_work/minecraft_server/net/minecraft/src/TileEntityFurnace.java	0000-00-00 00:00:00.000000000 -0000
@@ -1,6 +1,8 @@
 package net.minecraft.src;
 
-public class TileEntityFurnace extends TileEntity implements IInventory
+import net.minecraft.src.forge.ISidedInventory;
+
+public class TileEntityFurnace extends TileEntity implements IInventory, ISidedInventory
 {
     /**
      * The ItemStacks that hold the items currently being used in the furnace
@@ -242,8 +244,12 @@
         }
         else
         {
-            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
-            return var1 == null ? false : (this.furnaceItemStacks[2] == null ? true : (!this.furnaceItemStacks[2].isItemEqual(var1) ? false : (this.furnaceItemStacks[2].stackSize < this.getInventoryStackLimit() && this.furnaceItemStacks[2].stackSize < this.furnaceItemStacks[2].getMaxStackSize() ? true : this.furnaceItemStacks[2].stackSize < var1.getMaxStackSize())));
+            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
+            if (var1 == null) return false;
+            if (this.furnaceItemStacks[2] == null) return true;
+            if (!this.furnaceItemStacks[2].isItemEqual(var1)) return false;
+            int result = furnaceItemStacks[2].stackSize + var1.stackSize;
+            return (result < this.getInventoryStackLimit() && result < this.furnaceItemStacks[2].getMaxStackSize());
         }
     }
 
@@ -254,13 +260,13 @@
     {
         if (this.canSmelt())
         {
-            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().shiftedIndex);
+            ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0]);
 
             if (this.furnaceItemStacks[2] == null)
             {
                 this.furnaceItemStacks[2] = var1.copy();
             }
-            else if (this.furnaceItemStacks[2].itemID == var1.itemID)
+            else if (this.furnaceItemStacks[2].isItemEqual(var1))
             {
                 ++this.furnaceItemStacks[2].stackSize;
             }
@@ -278,7 +284,7 @@
      * Returns the number of ticks that the supplied fuel item will keep the furnace burning, or 0 if the item isn't
      * fuel
      */
-    private int getItemBurnTime(ItemStack par1ItemStack)
+    public int getItemBurnTime(ItemStack par1ItemStack)
     {
         if (par1ItemStack == null)
         {
@@ -287,7 +293,7 @@
         else
         {
             int var2 = par1ItemStack.getItem().shiftedIndex;
-            return var2 < 256 && Block.blocksList[var2].blockMaterial == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : (var2 == Block.sapling.blockID ? 100 : (var2 == Item.blazeRod.shiftedIndex ? 2400 : ModLoader.AddAllFuel(var2))))));
+            return var2 < 256 && Block.blocksList[var2].blockMaterial == Material.wood ? 300 : (var2 == Item.stick.shiftedIndex ? 100 : (var2 == Item.coal.shiftedIndex ? 1600 : (var2 == Item.bucketLava.shiftedIndex ? 20000 : (var2 == Block.sapling.blockID ? 100 : (var2 == Item.blazeRod.shiftedIndex ? 2400 : ModLoader.addAllFuel(par1ItemStack.itemID, par1ItemStack.getItemDamage()))))));
         }
     }
 
@@ -302,4 +308,18 @@
     public void openChest() {}
 
     public void closeChest() {}
+    
+    @Override
+    public int getStartInventorySide(int side) 
+    {
+        if (side == 0) return 1;
+        if (side == 1) return 0;
+        return 2;
+    }
+
+    @Override
+    public int getSizeInventorySide(int side) 
+    {
+        return 1;
+    }
 }

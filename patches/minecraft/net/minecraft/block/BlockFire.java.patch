--- ../src_base/minecraft/net/minecraft/block/BlockFire.java
+++ ../src_work/minecraft/net/minecraft/block/BlockFire.java
@@ -11,6 +11,9 @@
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProviderEnd;
 
+import net.minecraftforge.common.ForgeDirection;
+import static net.minecraftforge.common.ForgeDirection.*;
+
 public class BlockFire extends Block
 {
     /** The chance this block will encourage nearby blocks to catch on fire */
@@ -36,6 +39,8 @@
      */
     public void initializeBlock()
     {
+        abilityToCatchFire = Block.blockFlammability;
+        chanceToEncourageFire = Block.blockFireSpreadSpeed;
         this.setBurnRate(Block.planks.blockID, 5, 20);
         this.setBurnRate(Block.woodDoubleSlab.blockID, 5, 20);
         this.setBurnRate(Block.woodSingleSlab.blockID, 5, 20);
@@ -60,8 +65,7 @@
      */
     private void setBurnRate(int par1, int par2, int par3)
     {
-        this.chanceToEncourageFire[par1] = par2;
-        this.abilityToCatchFire[par1] = par3;
+        Block.setBurnProperties(par1, par2, par3);
     }
 
     /**
@@ -118,12 +122,8 @@
     {
         if (par1World.getGameRules().getGameRuleBooleanValue("doFireTick"))
         {
-            boolean flag = par1World.getBlockId(par2, par3 - 1, par4) == Block.netherrack.blockID;
-
-            if (par1World.provider instanceof WorldProviderEnd && par1World.getBlockId(par2, par3 - 1, par4) == Block.bedrock.blockID)
-            {
-                flag = true;
-            }
+            Block base = Block.blocksList[par1World.getBlockId(par2, par3 - 1, par4)];
+            boolean flag = (base != null && base.isFireSource(par1World, par2, par3 - 1, par4, par1World.getBlockMetadata(par2, par3 - 1, par4), UP));
 
             if (!this.canPlaceBlockAt(par1World, par2, par3, par4))
             {
@@ -152,7 +152,7 @@
                         par1World.func_94571_i(par2, par3, par4);
                     }
                 }
-                else if (!flag && !this.canBlockCatchFire(par1World, par2, par3 - 1, par4) && l == 15 && par5Random.nextInt(4) == 0)
+                else if (!flag && !this.canBlockCatchFire(par1World, par2, par3 - 1, par4, UP) && l == 15 && par5Random.nextInt(4) == 0)
                 {
                     par1World.func_94571_i(par2, par3, par4);
                 }
@@ -166,12 +166,12 @@
                         b0 = -50;
                     }
 
-                    this.tryToCatchBlockOnFire(par1World, par2 + 1, par3, par4, 300 + b0, par5Random, l);
-                    this.tryToCatchBlockOnFire(par1World, par2 - 1, par3, par4, 300 + b0, par5Random, l);
-                    this.tryToCatchBlockOnFire(par1World, par2, par3 - 1, par4, 250 + b0, par5Random, l);
-                    this.tryToCatchBlockOnFire(par1World, par2, par3 + 1, par4, 250 + b0, par5Random, l);
-                    this.tryToCatchBlockOnFire(par1World, par2, par3, par4 - 1, 300 + b0, par5Random, l);
-                    this.tryToCatchBlockOnFire(par1World, par2, par3, par4 + 1, 300 + b0, par5Random, l);
+                    this.tryToCatchBlockOnFire(par1World, par2 + 1, par3, par4, 300 + b0, par5Random, l, WEST );
+                    this.tryToCatchBlockOnFire(par1World, par2 - 1, par3, par4, 300 + b0, par5Random, l, EAST );
+                    this.tryToCatchBlockOnFire(par1World, par2, par3 - 1, par4, 250 + b0, par5Random, l, UP   );
+                    this.tryToCatchBlockOnFire(par1World, par2, par3 + 1, par4, 250 + b0, par5Random, l, DOWN );
+                    this.tryToCatchBlockOnFire(par1World, par2, par3, par4 - 1, 300 + b0, par5Random, l, SOUTH);
+                    this.tryToCatchBlockOnFire(par1World, par2, par3, par4 + 1, 300 + b0, par5Random, l, NORTH);
 
                     for (int i1 = par2 - 1; i1 <= par2 + 1; ++i1)
                     {
@@ -225,9 +225,20 @@
         return false;
     }
 
+    @Deprecated
     private void tryToCatchBlockOnFire(World par1World, int par2, int par3, int par4, int par5, Random par6Random, int par7)
     {
-        int j1 = this.abilityToCatchFire[par1World.getBlockId(par2, par3, par4)];
+        tryToCatchBlockOnFire(par1World, par2, par3, par4, par5, par6Random, par7, UP);
+    }
+
+    private void tryToCatchBlockOnFire(World par1World, int par2, int par3, int par4, int par5, Random par6Random, int par7, ForgeDirection face)
+    {
+        int j1 = 0;
+        Block block = Block.blocksList[par1World.getBlockId(par2, par3, par4)];
+        if (block != null)
+        {
+            j1 = block.getFlammability(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), face);
+        }
 
         if (par6Random.nextInt(par5) < j1)
         {
@@ -261,7 +272,12 @@
      */
     private boolean canNeighborBurn(World par1World, int par2, int par3, int par4)
     {
-        return this.canBlockCatchFire(par1World, par2 + 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2 - 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 - 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 + 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3, par4 - 1) ? true : this.canBlockCatchFire(par1World, par2, par3, par4 + 1)))));
+        return canBlockCatchFire(par1World, par2 + 1, par3, par4, WEST ) ||
+               canBlockCatchFire(par1World, par2 - 1, par3, par4, EAST ) ||
+               canBlockCatchFire(par1World, par2, par3 - 1, par4, UP   ) ||
+               canBlockCatchFire(par1World, par2, par3 + 1, par4, DOWN ) ||
+               canBlockCatchFire(par1World, par2, par3, par4 - 1, SOUTH) ||
+               canBlockCatchFire(par1World, par2, par3, par4 + 1, NORTH);
     }
 
     /**
@@ -277,12 +293,12 @@
         }
         else
         {
-            int l = this.getChanceToEncourageFire(par1World, par2 + 1, par3, par4, b0);
-            l = this.getChanceToEncourageFire(par1World, par2 - 1, par3, par4, l);
-            l = this.getChanceToEncourageFire(par1World, par2, par3 - 1, par4, l);
-            l = this.getChanceToEncourageFire(par1World, par2, par3 + 1, par4, l);
-            l = this.getChanceToEncourageFire(par1World, par2, par3, par4 - 1, l);
-            l = this.getChanceToEncourageFire(par1World, par2, par3, par4 + 1, l);
+            int l = this.getChanceToEncourageFire(par1World, par2 + 1, par3, par4, b0, WEST);
+            l = this.getChanceToEncourageFire(par1World, par2 - 1, par3, par4, l, EAST);
+            l = this.getChanceToEncourageFire(par1World, par2, par3 - 1, par4, l, UP);
+            l = this.getChanceToEncourageFire(par1World, par2, par3 + 1, par4, l, DOWN);
+            l = this.getChanceToEncourageFire(par1World, par2, par3, par4 - 1, l, SOUTH);
+            l = this.getChanceToEncourageFire(par1World, par2, par3, par4 + 1, l, NORTH);
             return l;
         }
     }
@@ -297,21 +313,24 @@
 
     /**
      * Checks the specified block coordinate to see if it can catch fire.  Args: blockAccess, x, y, z
-     */
+     * Deprecated for a side-sensitive version
+     */
+    @Deprecated
     public boolean canBlockCatchFire(IBlockAccess par1IBlockAccess, int par2, int par3, int par4)
     {
-        return this.chanceToEncourageFire[par1IBlockAccess.getBlockId(par2, par3, par4)] > 0;
+        return canBlockCatchFire(par1IBlockAccess, par2, par3, par4, UP);
     }
 
     /**
      * Retrieves a specified block's chance to encourage their neighbors to burn and if the number is greater than the
      * current number passed in it will return its number instead of the passed in one.  Args: world, x, y, z,
      * curChanceToEncourageFire
-     */
+     * Deprecated for a side-sensitive version
+     */
+    @Deprecated
     public int getChanceToEncourageFire(World par1World, int par2, int par3, int par4, int par5)
     {
-        int i1 = this.chanceToEncourageFire[par1World.getBlockId(par2, par3, par4)];
-        return i1 > par5 ? i1 : par5;
+        return getChanceToEncourageFire(par1World, par2, par3, par4, par5, UP);
     }
 
     /**
@@ -369,9 +388,9 @@
         float f1;
         float f2;
 
-        if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !Block.fire.canBlockCatchFire(par1World, par2, par3 - 1, par4))
-        {
-            if (Block.fire.canBlockCatchFire(par1World, par2 - 1, par3, par4))
+        if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !Block.fire.canBlockCatchFire(par1World, par2, par3 - 1, par4, UP))
+        {
+            if (Block.fire.canBlockCatchFire(par1World, par2 - 1, par3, par4, EAST))
             {
                 for (l = 0; l < 2; ++l)
                 {
@@ -382,7 +401,7 @@
                 }
             }
 
-            if (Block.fire.canBlockCatchFire(par1World, par2 + 1, par3, par4))
+            if (Block.fire.canBlockCatchFire(par1World, par2 + 1, par3, par4, WEST))
             {
                 for (l = 0; l < 2; ++l)
                 {
@@ -393,7 +412,7 @@
                 }
             }
 
-            if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 - 1))
+            if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 - 1, SOUTH))
             {
                 for (l = 0; l < 2; ++l)
                 {
@@ -404,7 +423,7 @@
                 }
             }
 
-            if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 + 1))
+            if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 + 1, NORTH))
             {
                 for (l = 0; l < 2; ++l)
                 {
@@ -415,7 +434,7 @@
                 }
             }
 
-            if (Block.fire.canBlockCatchFire(par1World, par2, par3 + 1, par4))
+            if (Block.fire.canBlockCatchFire(par1World, par2, par3 + 1, par4, DOWN))
             {
                 for (l = 0; l < 2; ++l)
                 {
@@ -459,4 +478,46 @@
     {
         return this.field_94439_c[0];
     }
+    
+    /**
+     * Side sensitive version that calls the block function.
+     * 
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param face The side the fire is coming from
+     * @return True if the face can catch fire.
+     */
+    public boolean canBlockCatchFire(IBlockAccess world, int x, int y, int z, ForgeDirection face)
+    {
+        Block block = Block.blocksList[world.getBlockId(x, y, z)];
+        if (block != null)
+        {
+            return block.isFlammable(world, x, y, z, world.getBlockMetadata(x, y, z), face);
+        }
+        return false;
+    }
+
+    /**
+     * Side sensitive version that calls the block function.
+     * 
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param oldChance The previous maximum chance.
+     * @param face The side the fire is coming from
+     * @return The chance of the block catching fire, or oldChance if it is higher
+     */
+    public int getChanceToEncourageFire(World world, int x, int y, int z, int oldChance, ForgeDirection face)
+    {
+        int newChance = 0;
+        Block block = Block.blocksList[world.getBlockId(x, y, z)];
+        if (block != null)
+        {
+            newChance = block.getFireSpreadSpeed(world, x, y, z, world.getBlockMetadata(x, y, z), face);
+        }
+        return (newChance > oldChance ? newChance : oldChance);
+    }
 }

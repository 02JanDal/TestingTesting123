--- ../src_base/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
+++ ../src_work/minecraft/net/minecraft/client/gui/inventory/GuiContainerCreative.java
@@ -55,6 +55,8 @@
     private Slot field_74235_v = null;
     private boolean field_74234_w = false;
     private CreativeCrafting field_82324_x;
+    private static int tabPage = 0;
+    private int maxPages = 0;
 
     public GuiContainerCreative(EntityPlayer par1EntityPlayer)
     {
@@ -229,6 +231,13 @@
             this.setCurrentCreativeTab(CreativeTabs.creativeTabArray[i]);
             this.field_82324_x = new CreativeCrafting(this.mc);
             this.mc.thePlayer.inventoryContainer.addCraftingToCrafters(this.field_82324_x);
+            int tabCount = CreativeTabs.creativeTabArray.length;
+            if (tabCount > 12)
+            {
+                controlList.add(new GuiButton(101, guiLeft,              guiTop - 50, 20, 20, "<"));
+                controlList.add(new GuiButton(102, guiLeft + xSize - 20, guiTop - 50, 20, 20, ">"));
+                maxPages = ((tabCount - 12) / 10) + 1;
+            }
         }
         else
         {
@@ -363,7 +372,7 @@
     {
         CreativeTabs creativetabs = CreativeTabs.creativeTabArray[selectedTabIndex];
 
-        if (creativetabs.drawInForegroundOfTab())
+        if (creativetabs != null && creativetabs.drawInForegroundOfTab())
         {
             this.fontRenderer.drawString(creativetabs.getTranslatedTabLabel(), 8, 6, 4210752);
         }
@@ -385,7 +394,7 @@
             {
                 CreativeTabs creativetabs = acreativetabs[k1];
 
-                if (this.func_74232_a(creativetabs, l, i1))
+                if (creativetabs != null && func_74232_a(creativetabs, l, i1))
                 {
                     this.setCurrentCreativeTab(creativetabs);
                     return;
@@ -401,11 +410,17 @@
      */
     private boolean needsScrollBars()
     {
+        if (CreativeTabs.creativeTabArray[selectedTabIndex] == null) return false;
         return selectedTabIndex != CreativeTabs.tabInventory.getTabIndex() && CreativeTabs.creativeTabArray[selectedTabIndex].shouldHidePlayerInventory() && ((ContainerCreative)this.inventorySlots).hasMoreThan1PageOfItemsInList();
     }
 
     private void setCurrentCreativeTab(CreativeTabs par1CreativeTabs)
     {
+        if (par1CreativeTabs == null)
+        {
+            return;
+        }
+
         int i = selectedTabIndex;
         selectedTabIndex = par1CreativeTabs.getTabIndex();
         ContainerCreative containercreative = (ContainerCreative)this.inventorySlots;
@@ -575,21 +590,42 @@
 
         super.drawScreen(par1, par2, par3);
         CreativeTabs[] acreativetabs = CreativeTabs.creativeTabArray;
-        int i2 = acreativetabs.length;
-
-        for (int j2 = 0; j2 < i2; ++j2)
+        int start = tabPage * 10;
+        int i2 = Math.min(acreativetabs.length, ((tabPage + 1) * 10) + 2);
+        if (tabPage != 0) start += 2;
+        boolean rendered = false;
+
+        for (int j2 = start; j2 < i2; ++j2)
         {
             CreativeTabs creativetabs = acreativetabs[j2];
 
-            if (this.renderCreativeInventoryHoveringText(creativetabs, par1, par2))
-            {
+            if (creativetabs != null && renderCreativeInventoryHoveringText(creativetabs, par1, par2))
+            {
+                rendered = true;
                 break;
             }
         }
 
+        if (!rendered && !renderCreativeInventoryHoveringText(CreativeTabs.tabAllSearch, par1, par2))
+        {
+            renderCreativeInventoryHoveringText(CreativeTabs.tabInventory, par1, par2);
+        }
+
         if (this.field_74235_v != null && selectedTabIndex == CreativeTabs.tabInventory.getTabIndex() && this.isPointInRegion(this.field_74235_v.xDisplayPosition, this.field_74235_v.yDisplayPosition, 16, 16, par1, par2))
         {
             this.drawCreativeTabHoveringText(StringTranslate.getInstance().translateKey("inventory.binSlot"), par1, par2);
+        }
+
+        if (maxPages != 0)
+        {
+            String page = String.format("%d / %d", tabPage + 1, maxPages + 1);
+            int width = fontRenderer.getStringWidth(page);
+            GL11.glDisable(GL11.GL_LIGHTING);
+            this.zLevel = 300.0F;
+            itemRenderer.zLevel = 300.0F;
+            fontRenderer.drawString(page, guiLeft + (xSize / 2) - (width / 2), guiTop - 44, -1);
+            this.zLevel = 0.0F;
+            itemRenderer.zLevel = 0.0F;
         }
 
         GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
@@ -610,14 +646,32 @@
         int i1 = acreativetabs.length;
         int j1;
 
-        for (j1 = 0; j1 < i1; ++j1)
+        int start = tabPage * 10;
+        i1 = Math.min(acreativetabs.length, ((tabPage + 1) * 10 + 2));
+        if (tabPage != 0) start += 2;
+
+        for (j1 = start; j1 < i1; ++j1)
         {
             CreativeTabs creativetabs1 = acreativetabs[j1];
             this.mc.renderEngine.bindTexture(k);
 
-            if (creativetabs1.getTabIndex() != selectedTabIndex)
+            if (creativetabs1 != null && creativetabs1.getTabIndex() != selectedTabIndex)
             {
                 this.renderCreativeTab(creativetabs1);
+            }
+        }
+
+        if (tabPage != 0)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch)
+            {
+                mc.renderEngine.bindTexture(k);
+                renderCreativeTab(CreativeTabs.tabAllSearch);
+            }
+            if (creativetabs != CreativeTabs.tabInventory)
+            {
+                mc.renderEngine.bindTexture(k);
+                renderCreativeTab(CreativeTabs.tabInventory);
             }
         }
 
@@ -635,6 +689,14 @@
             this.drawTexturedModalRect(k1, i1 + (int)((float)(j1 - i1 - 17) * this.currentScroll), 232 + (this.needsScrollBars() ? 0 : 12), 0, 12, 15);
         }
 
+        if (creativetabs == null || creativetabs.getTabPage() != tabPage)
+        {
+            if (creativetabs != CreativeTabs.tabAllSearch && creativetabs != CreativeTabs.tabInventory)
+            {
+                return;
+            }
+        }
+
         this.renderCreativeTab(creativetabs);
 
         if (creativetabs == CreativeTabs.tabInventory)
@@ -645,6 +707,15 @@
 
     protected boolean func_74232_a(CreativeTabs par1CreativeTabs, int par2, int par3)
     {
+        if (par1CreativeTabs.getTabPage() != tabPage)
+        {
+            if (par1CreativeTabs != CreativeTabs.tabAllSearch &&
+                par1CreativeTabs != CreativeTabs.tabInventory)
+            {
+                return false;
+            }
+        }
+
         int k = par1CreativeTabs.getTabColumn();
         int l = 28 * k;
         byte b0 = 0;
@@ -759,7 +830,7 @@
         i1 += 8 + (flag1 ? 1 : -1);
         GL11.glEnable(GL11.GL_LIGHTING);
         GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-        ItemStack itemstack = new ItemStack(par1CreativeTabs.getTabIconItem());
+        ItemStack itemstack = par1CreativeTabs.getIconItemStack();
         itemRenderer.renderItemAndEffectIntoGUI(this.fontRenderer, this.mc.renderEngine, itemstack, l, i1);
         itemRenderer.renderItemOverlayIntoGUI(this.fontRenderer, this.mc.renderEngine, itemstack, l, i1);
         GL11.glDisable(GL11.GL_LIGHTING);
@@ -781,6 +852,15 @@
         {
             this.mc.displayGuiScreen(new GuiStats(this, this.mc.statFileWriter));
         }
+
+        if (par1GuiButton.id == 101)
+        {
+            tabPage = Math.max(tabPage - 1, 0);
+        }
+        else if (par1GuiButton.id == 102)
+        {
+            tabPage = Math.min(tabPage + 1, maxPages);
+        }
     }
 
     public int func_74230_h()

--- ../src_base/minecraft/net/minecraft/entity/player/EntityPlayer.java
+++ ../src_work/minecraft/net/minecraft/entity/player/EntityPlayer.java
@@ -57,8 +57,21 @@
 import net.minecraft.world.World;
 import net.minecraft.world.chunk.IChunkProvider;
 
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.common.ISpecialArmor.ArmorProperties;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.ForgeEventFactory;
+import net.minecraftforge.event.entity.living.LivingHurtEvent;
+import net.minecraftforge.event.entity.player.AttackEntityEvent;
+import net.minecraftforge.event.entity.player.EntityInteractEvent;
+import net.minecraftforge.event.entity.player.PlayerDestroyItemEvent;
+import net.minecraftforge.event.entity.player.PlayerDropsEvent;
+import net.minecraftforge.event.entity.player.PlayerSleepInBedEvent;
+
 public abstract class EntityPlayer extends EntityLiving implements ICommandSender
 {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
+
     /** Inventory of the player */
     public InventoryPlayer inventory = new InventoryPlayer(this);
     private InventoryEnderChest theInventoryEnderChest = new InventoryEnderChest();
@@ -261,6 +274,7 @@
 
             if (itemstack == this.itemInUse)
             {
+                itemInUse.getItem().onUsingItemTick(itemInUse, this, itemInUseCount);
                 if (this.itemInUseCount <= 25 && this.itemInUseCount % 4 == 0)
                 {
                     this.updateItemUse(itemstack, 5);
@@ -499,11 +513,11 @@
         this.cameraYaw = 0.0F;
         this.addMountedMovementStat(this.posX - d0, this.posY - d1, this.posZ - d2);
 
-        if (this.ridingEntity instanceof EntityPig)
+        if (this.ridingEntity instanceof EntityLiving && ((EntityLiving)ridingEntity).shouldRiderFaceForward(this))
         {
             this.rotationPitch = f1;
             this.rotationYaw = f;
-            this.renderYawOffset = ((EntityPig)this.ridingEntity).renderYawOffset;
+            this.renderYawOffset = ((EntityLiving)this.ridingEntity).renderYawOffset;
         }
     }
 
@@ -632,6 +646,9 @@
         this.setPosition(this.posX, this.posY, this.posZ);
         this.motionY = 0.10000000149011612D;
 
+        captureDrops = true;
+        capturedDrops.clear();
+
         if (this.username.equals("Notch"))
         {
             this.dropPlayerItemWithRandomChoice(new ItemStack(Item.appleRed, 1), true);
@@ -640,6 +657,20 @@
         if (!this.worldObj.getGameRules().getGameRuleBooleanValue("keepInventory"))
         {
             this.inventory.dropAllItems();
+        }
+
+        captureDrops = false;
+
+        if (!worldObj.isRemote)
+        {
+            PlayerDropsEvent event = new PlayerDropsEvent(this, par1DamageSource, capturedDrops, recentlyHit > 0);
+            if (!MinecraftForge.EVENT_BUS.post(event))
+            {
+                for (EntityItem item : capturedDrops)
+                {
+                    joinEntityItemWithWorld(item);
+                }
+            }
         }
 
         if (par1DamageSource != null)
@@ -679,7 +710,20 @@
      */
     public EntityItem dropOneItem(boolean par1)
     {
-        return this.dropPlayerItemWithRandomChoice(this.inventory.decrStackSize(this.inventory.currentItem, par1 && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1), false);
+        ItemStack stack = inventory.getCurrentItem();
+
+        if (stack == null)
+        {
+            return null;
+        }
+
+        if (stack.getItem().onDroppedByPlayer(stack, this))
+        {
+            int count = par1 && this.inventory.getCurrentItem() != null ? this.inventory.getCurrentItem().stackSize : 1;
+            return ForgeHooks.onPlayerTossEvent(this, inventory.decrStackSize(inventory.currentItem, count));
+        }
+
+        return null;
     }
 
     /**
@@ -688,7 +732,7 @@
      */
     public EntityItem dropPlayerItem(ItemStack par1ItemStack)
     {
-        return this.dropPlayerItemWithRandomChoice(par1ItemStack, false);
+        return ForgeHooks.onPlayerTossEvent(this, par1ItemStack);
     }
 
     /**
@@ -740,23 +784,39 @@
      */
     public void joinEntityItemWithWorld(EntityItem par1EntityItem)
     {
-        this.worldObj.spawnEntityInWorld(par1EntityItem);
+        if (captureDrops)
+        {
+            capturedDrops.add(par1EntityItem);
+        }
+        else
+        {
+            this.worldObj.spawnEntityInWorld(par1EntityItem);
+        }
     }
 
     /**
      * Returns how strong the player is against the specified block at this moment
-     */
+     * Deprecated in favor of the more sensitive version
+     */
+    @Deprecated
     public float getCurrentPlayerStrVsBlock(Block par1Block)
     {
-        float f = this.inventory.getStrVsBlock(par1Block);
+        return getCurrentPlayerStrVsBlock(par1Block, 0);
+    }
+
+    public float getCurrentPlayerStrVsBlock(Block par1Block, int meta)
+    {
+        ItemStack stack = inventory.getCurrentItem();
+        float f = (stack == null ? 1.0F : stack.getItem().getStrVsBlock(stack, par1Block, meta));
         int i = EnchantmentHelper.getEfficiencyModifier(this);
         ItemStack itemstack = this.inventory.getCurrentItem();
 
         if (i > 0 && itemstack != null)
         {
             float f1 = (float)(i * i + 1);
-
-            if (!itemstack.canHarvestBlock(par1Block) && f <= 1.0F)
+            boolean canHarvest = ForgeHooks.canToolHarvestBlock(par1Block, meta, itemstack);
+
+            if (!canHarvest && f <= 1.0F)
             {
                 f += f1 * 0.08F;
             }
@@ -786,7 +846,8 @@
             f /= 5.0F;
         }
 
-        return f;
+        f = ForgeEventFactory.getBreakSpeed(this, par1Block, meta, f);
+        return (f < 0 ? 0 : f);
     }
 
     /**
@@ -794,7 +855,7 @@
      */
     public boolean canHarvestBlock(Block par1Block)
     {
-        return this.inventory.canHarvestBlock(par1Block);
+        return ForgeEventFactory.doPlayerHarvestCheck(this, par1Block, inventory.canHarvestBlock(par1Block));
     }
 
     /**
@@ -1083,12 +1144,22 @@
     {
         if (!this.isEntityInvulnerable())
         {
+            par2 = ForgeHooks.onLivingHurt(this, par1DamageSource, par2);
+            if (par2 <= 0)
+            {
+                return;
+            }
+
             if (!par1DamageSource.isUnblockable() && this.isBlocking())
             {
                 par2 = 1 + par2 >> 1;
             }
 
-            par2 = this.applyArmorCalculations(par1DamageSource, par2);
+            par2 = ArmorProperties.ApplyArmor(this, inventory.armorInventory, par1DamageSource, par2);
+            if (par2 <= 0)
+            {
+                return;
+            }
             par2 = this.applyPotionDamageCalculations(par1DamageSource, par2);
             this.addExhaustion(par1DamageSource.getHungerDamage());
             int j = this.getHealth();
@@ -1131,6 +1202,10 @@
 
     public boolean interactWith(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new EntityInteractEvent(this, par1Entity)))
+        {
+            return false;
+        }
         if (par1Entity.interact(this))
         {
             return true;
@@ -1174,7 +1249,9 @@
      */
     public void destroyCurrentEquippedItem()
     {
+        ItemStack orig = getCurrentEquippedItem();
         this.inventory.setInventorySlotContents(this.inventory.currentItem, (ItemStack)null);
+        MinecraftForge.EVENT_BUS.post(new PlayerDestroyItemEvent(this, orig));
     }
 
     /**
@@ -1191,6 +1268,15 @@
      */
     public void attackTargetEntityWithCurrentItem(Entity par1Entity)
     {
+        if (MinecraftForge.EVENT_BUS.post(new AttackEntityEvent(this, par1Entity)))
+        {
+            return;
+        }
+        ItemStack stack = getCurrentEquippedItem();
+        if (stack != null && stack.getItem().onLeftClickEntity(stack, this, par1Entity))
+        {
+            return;
+        }
         if (par1Entity.canAttackWithItem())
         {
             if (!par1Entity.func_85031_j(this))
@@ -1354,6 +1440,12 @@
      */
     public EnumStatus sleepInBedAt(int par1, int par2, int par3)
     {
+        PlayerSleepInBedEvent event = new PlayerSleepInBedEvent(this, par1, par2, par3);
+        MinecraftForge.EVENT_BUS.post(event);
+        if (event.result != null)
+        {
+            return event.result;
+        }
         if (!this.worldObj.isRemote)
         {
             if (this.isPlayerSleeping() || !this.isEntityAlive())
@@ -1393,6 +1485,11 @@
         {
             int l = this.worldObj.getBlockMetadata(par1, par2, par3);
             int i1 = BlockBed.getDirection(l);
+            Block block = Block.blocksList[worldObj.getBlockId(par1, par2, par3)];
+            if (block != null)
+            {
+                i1 = block.getBedDirection(worldObj, par1, par2, par3);
+            }
             float f = 0.5F;
             float f1 = 0.5F;
 
@@ -1463,10 +1560,12 @@
         ChunkCoordinates chunkcoordinates = this.playerLocation;
         ChunkCoordinates chunkcoordinates1 = this.playerLocation;
 
-        if (chunkcoordinates != null && this.worldObj.getBlockId(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ) == Block.bed.blockID)
-        {
-            BlockBed.setBedOccupied(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, false);
-            chunkcoordinates1 = BlockBed.getNearestEmptyChunkCoordinates(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, 0);
+        Block block = (chunkcoordinates == null ? null : Block.blocksList[worldObj.getBlockId(chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ)]);
+
+        if (chunkcoordinates != null && block != null && block.isBed(worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this))
+        {
+            block.setBedOccupied(this.worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this, false);
+            chunkcoordinates1 = block.getBedSpawnPosition(worldObj, chunkcoordinates.posX, chunkcoordinates.posY, chunkcoordinates.posZ, this);
 
             if (chunkcoordinates1 == null)
             {
@@ -1503,7 +1602,9 @@
      */
     private boolean isInBed()
     {
-        return this.worldObj.getBlockId(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ) == Block.bed.blockID;
+        ChunkCoordinates c = playerLocation;
+        int blockID = worldObj.getBlockId(c.posX, c.posY, c.posZ);
+        return Block.blocksList[blockID] != null && Block.blocksList[blockID].isBed(worldObj, c.posX, c.posY, c.posZ, this);
     }
 
     /**
@@ -1518,9 +1619,12 @@
         ichunkprovider.loadChunk(par1ChunkCoordinates.posX - 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
         ichunkprovider.loadChunk(par1ChunkCoordinates.posX + 3 >> 4, par1ChunkCoordinates.posZ + 3 >> 4);
 
-        if (par0World.getBlockId(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ) == Block.bed.blockID)
-        {
-            ChunkCoordinates chunkcoordinates1 = BlockBed.getNearestEmptyChunkCoordinates(par0World, par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ, 0);
+        ChunkCoordinates c = par1ChunkCoordinates;
+        Block block = Block.blocksList[par0World.getBlockId(c.posX, c.posY, c.posZ)];
+
+        if (block != null && block.isBed(par0World, c.posX, c.posY, c.posZ, null))
+        {
+            ChunkCoordinates chunkcoordinates1 = block.getBedSpawnPosition(par0World, c.posX, c.posY, c.posZ, null);
             return chunkcoordinates1;
         }
         else
@@ -1542,10 +1646,13 @@
     {
         if (this.playerLocation != null)
         {
-            int i = this.worldObj.getBlockMetadata(this.playerLocation.posX, this.playerLocation.posY, this.playerLocation.posZ);
-            int j = BlockBed.getDirection(i);
-
-            switch (j)
+            int x = playerLocation.posX;
+            int y = playerLocation.posY;
+            int z = playerLocation.posZ;
+            Block block = Block.blocksList[worldObj.getBlockId(x, y, z)];
+            int i = (block == null ? 0 : block.getBedDirection(worldObj, x, y, z));
+
+            switch (i)
             {
                 case 0:
                     return 90.0F;
@@ -1852,7 +1959,7 @@
         {
             if (par1ItemStack.getItem().requiresMultipleRenderPasses())
             {
-                return par1ItemStack.getItem().getIconFromDamageForRenderPass(par1ItemStack.getItemDamage(), par2);
+                return par1ItemStack.getItem().getIcon(par1ItemStack, par2);
             }
 
             if (this.itemInUse != null && par1ItemStack.itemID == Item.bow.itemID)
@@ -1874,6 +1981,7 @@
                     return Item.bow.func_94599_c(0);
                 }
             }
+            icon = par1ItemStack.getItem().getIcon(par1ItemStack, par2, this, itemInUse, itemInUseCount);
         }
 
         return icon;
@@ -2105,6 +2213,14 @@
         }
 
         this.theInventoryEnderChest = par1EntityPlayer.theInventoryEnderChest;
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        NBTTagCompound old = par1EntityPlayer.getEntityData();
+        if (old.hasKey(PERSISTED_NBT_TAG))
+        {
+            getEntityData().setCompoundTag(PERSISTED_NBT_TAG, old.getCompoundTag(PERSISTED_NBT_TAG));
+        }
     }
 
     /**
@@ -2176,7 +2292,14 @@
      */
     public void setCurrentItemOrArmor(int par1, ItemStack par2ItemStack)
     {
-        this.inventory.armorInventory[par1] = par2ItemStack;
+        if (par1 == 0)
+        {
+            this.inventory.mainInventory[this.inventory.currentItem] = par2ItemStack;
+        }
+        else
+        {
+            this.inventory.armorInventory[par1 - 1] = par2ItemStack;
+        }
     }
 
     public ItemStack[] getLastActiveItems()
